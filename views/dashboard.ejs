<%- include('layout', { title: 'My Bookings' }) %>

<div class="container py-5">
	<div class="row mb-4">
		<div class="col-md-8">
			<h1>My Bookings</h1>
		</div>
		<div class="col-md-4 text-md-end">
			<a href="/booking" class="btn btn-primary">Book New Session</a>
		</div>
	</div>

	<!-- Authentication Check -->
	<div class="auth-check">
		<div class="alert alert-warning" id="authAlert" style="display: none">
			<p>Please <a href="/login">login</a> to view your bookings.</p>
		</div>
	</div>

	<!-- Bookings List -->
	<div id="bookingsList" style="display: none">
		<!-- Loading Spinner -->
		<div id="loadingSpinner" class="text-center py-5">
			<div class="spinner-border text-primary" role="status">
				<span class="visually-hidden">Loading...</span>
			</div>
			<p class="mt-2">Loading your bookings...</p>
		</div>

		<!-- No Bookings Message -->
		<div id="noBookings" class="text-center py-5" style="display: none">
			<div class="mb-4">
				<i class="fas fa-calendar-times fa-4x text-muted"></i>
			</div>
			<h3>No Bookings Found</h3>
			<p class="text-muted">You haven't made any bookings yet.</p>
			<a href="/booking" class="btn btn-primary mt-3"
				>Book Your First Session</a
			>
		</div>

		<!-- Bookings Table -->
		<div id="bookingsTable" style="display: none">
			<div class="card shadow-sm">
				<div class="card-body p-0">
					<div class="table-responsive">
						<table class="table table-hover mb-0">
							<thead class="table-light">
								<tr>
									<th>Date</th>
									<th>Time</th>
									<th>Package</th>
									<th>Duration</th>
									<th>Price</th>
									<th>Status</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody id="bookingsTableBody">
								<!-- Bookings will be loaded dynamically -->
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Booking Details Modal -->
<div
	class="modal fade"
	id="bookingDetailsModal"
	tabindex="-1"
	aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Booking Details</h5>
				<button
					type="button"
					class="btn-close"
					data-bs-dismiss="modal"
					aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="row">
					<div class="col-md-6">
						<h6>Booking Information</h6>
						<table class="table table-sm">
							<tr>
								<th>Booking ID:</th>
								<td id="modalBookingId"></td>
							</tr>
							<tr>
								<th>Date:</th>
								<td id="modalDate"></td>
							</tr>
							<tr>
								<th>Time:</th>
								<td id="modalTime"></td>
							</tr>
							<tr>
								<th>Package:</th>
								<td id="modalPackage"></td>
							</tr>
							<tr>
								<th>Duration:</th>
								<td id="modalDuration"></td>
							</tr>
							<tr>
								<th>Price:</th>
								<td id="modalPrice"></td>
							</tr>
							<tr>
								<th>Status:</th>
								<td id="modalStatus"></td>
							</tr>
						</table>
					</div>
					<div class="col-md-6">
						<h6>Special Requests</h6>
						<p
							id="modalRequests"
							class="border p-2 rounded"
							style="min-height: 100px"></p>

						<h6 class="mt-3">Actions</h6>
						<div id="modalActions">
							<button
								type="button"
								class="btn btn-danger me-2"
								id="cancelBookingBtn">
								Cancel Booking
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<% block('script', `
<script>
	document.addEventListener("DOMContentLoaded", function () {
		// Check if user is logged in
		const token = localStorage.getItem("token");
		const authAlert = document.getElementById("authAlert");
		const bookingsList = document.getElementById("bookingsList");

		if (!token) {
			authAlert.style.display = "block";
			return;
		} else {
			bookingsList.style.display = "block";
			fetchBookings();
		}

		// Fetch user's bookings
		async function fetchBookings() {
			try {
				const response = await fetch("/api/bookings", {
					headers: {
						Authorization: `Bearer ${token}`,
					},
				});

				if (!response.ok) {
					throw new Error("Failed to fetch bookings");
				}

				const bookings = await response.json();

				// Hide loading spinner
				document.getElementById("loadingSpinner").style.display = "none";

				if (bookings.length === 0) {
					// Show no bookings message
					document.getElementById("noBookings").style.display = "block";
				} else {
					// Show bookings table and populate it
					document.getElementById("bookingsTable").style.display = "block";
					populateBookingsTable(bookings);
				}
			} catch (error) {
				console.error("Error fetching bookings:", error);
				document.getElementById("loadingSpinner").style.display = "none";
				// Show error message
				const noBookings = document.getElementById("noBookings");
				noBookings.style.display = "block";
				noBookings.innerHTML = `
          <div class="mb-4">
            <i class="fas fa-exclamation-circle fa-4x text-danger"></i>
          </div>
          <h3>Error Loading Bookings</h3>
          <p class="text-muted">${error.message}</p>
          <button class="btn btn-primary mt-3" onclick="location.reload()">Try Again</button>
        `;
			}
		}

		// Populate bookings table
		function populateBookingsTable(bookings) {
			const tableBody = document.getElementById("bookingsTableBody");
			tableBody.innerHTML = "";

			bookings.forEach((booking) => {
				const row = document.createElement("tr");

				// Format date
				const bookingDate = new Date(booking.bookingDate).toLocaleDateString();

				// Format status with badge
				let statusBadge;
				switch (booking.status) {
					case "pending":
						statusBadge = '<span class="badge bg-warning">Pending</span>';
						break;
					case "confirmed":
						statusBadge = '<span class="badge bg-success">Confirmed</span>';
						break;
					case "cancelled":
						statusBadge = '<span class="badge bg-danger">Cancelled</span>';
						break;
					case "completed":
						statusBadge = '<span class="badge bg-info">Completed</span>';
						break;
					default:
						statusBadge = '<span class="badge bg-secondary">Unknown</span>';
				}

				row.innerHTML = `
          <td>${bookingDate}</td>
          <td>${booking.startTime} - ${booking.endTime}</td>
          <td>${booking.packageType}</td>
          <td>${booking.duration} hour${booking.duration > 1 ? "s" : ""}</td>
          <td>$${booking.totalPrice}</td>
          <td>${statusBadge}</td>
          <td>
            <button class="btn btn-sm btn-outline-primary view-details" data-id="${
							booking._id
						}">
              View Details
            </button>
          </td>
        `;

				tableBody.appendChild(row);
			});

			// Add event listeners to view details buttons
			document.querySelectorAll(".view-details").forEach((button) => {
				button.addEventListener("click", function () {
					const bookingId = this.getAttribute("data-id");
					showBookingDetails(bookingId);
				});
			});
		}

		// Show booking details in modal
		async function showBookingDetails(bookingId) {
			try {
				const response = await fetch(`/api/bookings/${bookingId}`, {
					headers: {
						Authorization: `Bearer ${token}`,
					},
				});

				if (!response.ok) {
					throw new Error("Failed to fetch booking details");
				}

				const booking = await response.json();

				// Populate modal with booking details
				document.getElementById("modalBookingId").textContent = booking._id;
				document.getElementById("modalDate").textContent = new Date(
					booking.bookingDate
				).toLocaleDateString();
				document.getElementById(
					"modalTime"
				).textContent = `${booking.startTime} - ${booking.endTime}`;
				document.getElementById("modalPackage").textContent =
					booking.packageType;
				document.getElementById("modalDuration").textContent = `${
					booking.duration
				} hour${booking.duration > 1 ? "s" : ""}`;
				document.getElementById(
					"modalPrice"
				).textContent = `$${booking.totalPrice}`;

				// Status with badge
				let statusBadge;
				switch (booking.status) {
					case "pending":
						statusBadge = '<span class="badge bg-warning">Pending</span>';
						break;
					case "confirmed":
						statusBadge = '<span class="badge bg-success">Confirmed</span>';
						break;
					case "cancelled":
						statusBadge = '<span class="badge bg-danger">Cancelled</span>';
						break;
					case "completed":
						statusBadge = '<span class="badge bg-info">Completed</span>';
						break;
					default:
						statusBadge = '<span class="badge bg-secondary">Unknown</span>';
				}
				document.getElementById("modalStatus").innerHTML = statusBadge;

				// Special requests
				document.getElementById("modalRequests").textContent =
					booking.specialRequests || "No special requests";

				// Show/hide cancel button based on status
				const cancelBtn = document.getElementById("cancelBookingBtn");
				if (booking.status === "pending" || booking.status === "confirmed") {
					cancelBtn.style.display = "inline-block";
					cancelBtn.onclick = function () {
						cancelBooking(booking._id);
					};
				} else {
					cancelBtn.style.display = "none";
				}

				// Show modal
				const modal = new bootstrap.Modal(
					document.getElementById("bookingDetailsModal")
				);
				modal.show();
			} catch (error) {
				console.error("Error fetching booking details:", error);
				alert("Failed to load booking details. Please try again.");
			}
		}

		// Cancel booking
		async function cancelBooking(bookingId) {
			if (confirm("Are you sure you want to cancel this booking?")) {
				try {
					const response = await fetch(`/api/bookings/${bookingId}/status`, {
						method: "PATCH",
						headers: {
							"Content-Type": "application/json",
							Authorization: `Bearer ${token}`,
						},
						body: JSON.stringify({ status: "cancelled" }),
					});

					if (!response.ok) {
						throw new Error("Failed to cancel booking");
					}

					// Close modal and refresh bookings
					bootstrap.Modal.getInstance(
						document.getElementById("bookingDetailsModal")
					).hide();

					// Refresh the page to show updated booking status
					location.reload();
				} catch (error) {
					console.error("Error cancelling booking:", error);
					alert("Failed to cancel booking. Please try again.");
				}
			}
		}
	});
</script>
`) %>
